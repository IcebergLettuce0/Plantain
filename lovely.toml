[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

#cash out context for apple pie

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
match_indent = true
pattern = '''G.deck:shuffle('cashout'..G.GAME.round_resets.ante)'''
position = "after"
payload = '''
for i=1, #G.jokers.cards do
    eval_card(G.jokers.cards[i], {pl_cash_out = true})
end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
match_indent = true
pattern = '''function Card:set_base(card, initial)
    card = card or {}'''
position = "after"
payload = '''
if G.jokers and G.jokers.cards and card then
  for i=1, #G.jokers.cards do
    if G.jokers.cards[i].config.center.key == 'j_pl_painterly_joker' and self.playing_card and self.config.card.suit ~= card.suit and not initial then
      G.jokers.cards[i].ability.extra.chips = G.jokers.cards[i].ability.extra.chips + 4
      card_eval_status_text(G.jokers.cards[i], 'jokers', nil, nil, nil, 
      {
        message = localize { type = 'variable', key = 'a_chips', vars = { G.jokers.cards[i].ability.extra.chips } }
      })
    end
  end
end
'''

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
match_indent = true
pattern = '''func = (function() check_for_unlock{type = 'upgrade_hand', hand = hand, level = G.GAME.hands[hand].level} return true end)
    }))'''
position = "after"
payload = '''
if G.jokers and G.jokers.cards and card.ability.name ~= 'Black Hole' then
  for i=1, #G.jokers.cards do
    if G.jokers.cards[i].config.center.key == "j_pl_croissant" then
      eval_card(G.jokers.cards[i], {pl_croissant_upgrade = true})
      G.GAME.hands[hand].level = math.max(0, G.GAME.hands[hand].level + amount)
      G.GAME.hands[hand].mult = math.max(G.GAME.hands[hand].s_mult + G.GAME.hands[hand].l_mult*(G.GAME.hands[hand].level - 1), 1)
      G.GAME.hands[hand].chips = math.max(G.GAME.hands[hand].s_chips + G.GAME.hands[hand].l_chips*(G.GAME.hands[hand].level - 1), 0)
      if not instant then 
          G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2, func = function()
              play_sound('tarot1')
              if card then card:juice_up(0.8, 0.5) end
              G.TAROT_INTERRUPT_PULSE = true
              return true end }))
          update_hand_text({delay = 0}, {mult = G.GAME.hands[hand].mult, StatusText = true})
          G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.9, func = function()
              play_sound('tarot1')
              if card then card:juice_up(0.8, 0.5) end
              return true end }))
          update_hand_text({delay = 0}, {chips = G.GAME.hands[hand].chips, StatusText = true})
          G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.9, func = function()
              play_sound('tarot1')
              if card then card:juice_up(0.8, 0.5) end
              G.TAROT_INTERRUPT_PULSE = nil
              return true end }))
          update_hand_text({sound = 'button', volume = 0.7, pitch = 0.9, delay = 0}, {level=G.GAME.hands[hand].level})
          delay(1.3)
      end
      G.E_MANAGER:add_event(Event({
          trigger = 'immediate',
          func = (function() check_for_unlock{type = 'upgrade_hand', hand = hand, level = G.GAME.hands[hand].level} return true end)
      }))
      eval_card(G.jokers.cards[i], {pl_croissant_done = true})
    end
  end
end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
match_indent = true
pattern = '''for k, v in pairs(G.GAME.hands) do
            level_up_hand(self, k, true)
        end
        update_hand_text({sound = 'button', volume = 0.7, pitch = 1.1, delay = 0}, {mult = 0, chips = 0, handname = '', level = ''})'''
position = "after"
payload = '''
if G.jokers and G.jokers.cards then
  for i=1, #G.jokers.cards do
    if G.jokers.cards[i].config.center.key == "j_pl_croissant" then
      eval_card(G.jokers.cards[i], {pl_croissant_upgrade = true})
      update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize('k_all_hands'),chips = '...', mult = '...', level=''})
        G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2, func = function()
            play_sound('tarot1')
            self:juice_up(0.8, 0.5)
            G.TAROT_INTERRUPT_PULSE = true
            return true end }))
        update_hand_text({delay = 0}, {mult = '+', StatusText = true})
        G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.9, func = function()
            play_sound('tarot1')
            self:juice_up(0.8, 0.5)
            return true end }))
        update_hand_text({delay = 0}, {chips = '+', StatusText = true})
        G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.9, func = function()
            play_sound('tarot1')
            self:juice_up(0.8, 0.5)
            G.TAROT_INTERRUPT_PULSE = nil
            return true end }))
        update_hand_text({sound = 'button', volume = 0.7, pitch = 0.9, delay = 0}, {level='+1'})
        delay(1.3)
        for k, v in pairs(G.GAME.hands) do
            level_up_hand(self, k, true)
        end
        update_hand_text({sound = 'button', volume = 0.7, pitch = 1.1, delay = 0}, {mult = 0, chips = 0, handname = '', level = ''})
        eval_card(G.jokers.cards[i], {pl_croissant_done = true})
    end
  end
end
'''

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
match_indent = true
pattern = '''add_tag(_tag.config.ref_table)'''
position = "after"
payload = '''
if G.jokers and G.jokers.cards then
    for i=1, #G.jokers.cards do
        if G.jokers.cards[i].config.center.key == "j_pl_grape_soda" then
        G.E_MANAGER:add_event(Event({
        trigger = 'immediate',
        func = function()
          delay(0.3)
          SMODS.calculate_context({skip_blind = true})
          for i = 1, #G.GAME.tags do
            G.GAME.tags[i]:apply_to_run({type = 'immediate'})
          end
          for i = 1, #G.GAME.tags do
            if G.GAME.tags[i]:apply_to_run({type = 'new_blind_choice'}) then break end
          end
          return true
        end
      }))
      _tag.children[2] = nil
      _tag.children[1] = nil
        return 
        end
    end
end
'''

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
match_indent = true
pattern = '''elseif e.config.id ~= G.GAME.blind_on_deck then'''
position = "before"
payload = '''
if G.GAME.pl_grape_used == G.GAME.blind_on_deck then
  _tag_container.children[2] = nil
  _tag_container.children[1] = nil
else
  G.GAME.pl_grape_used = nil
end
'''
