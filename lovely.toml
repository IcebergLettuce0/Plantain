[manifest]
version = "1.0.0"
dump_lua = true
priority = 0


[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
match_indent = true
pattern = '''G.deck:shuffle('cashout'..G.GAME.round_resets.ante)'''
position = "after"
payload = '''
for i=1, #G.jokers.cards do
    eval_card(G.jokers.cards[i], {pl_cash_out = true})
end
'''

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''if self.ability.set == "Joker" and not self.debuff then'''
position = "after"
payload = '''
if context.setting_blind and not self.getting_sliced and context.blind == G.GAME.round_resets.blind and self.config.center.key == 'j_Plantain_inkblot_joker' then
  local options = {}
  for k, v in pairs(G.P_CENTERS) do
    if v.unlocked and v.set == 'Joker' and v.key ~= 'j_Plantain_inkblot_joker' then
      table.insert(options, v)
    end
  end
  local chosen_key = pseudorandom_element(options, pseudoseed('inkblot_joker'))
  if chosen_key then
    local mim = chosen_key.key
    local old = G.P_CENTERS['j_Plantain_inkblot_joker']
    for k, v in pairs(chosen_key) do
      if k == 'loc_vars' then
        old['plan_loc_vars_2'] = v
      end
    end
    for k, v in pairs(old) do
      if k == 'key' or k == 'rarity' or k == 'loc_txt' or k == 'loc_vars' or k == 'plan_loc_vars_2' or k == 'atlas' or k == 'cost' or k == 'pos' then
        chosen_key[k] = v
      end
    end
    self:set_ability(chosen_key)
    self:set_sprites(old)
    self.config.center.mim_key = mim
  end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''elseif self.ability.name == 'Perkeo' then loc_vars = {self.ability.extra}
        end'''
position = "after"
payload = '''self.config.center.plantain_info = loc_vars
if self.config.center.mim_key then
    loc_vars = {localize{type = 'name_text', set = 'Joker', key = self.config.center.mim_key}}
else
    loc_vars = { 'none' } 
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if not card then
            local ability = copy_table(cfg)
            ability.set = 'Joker'
            ability.name = _c.name
            local ret = {Card.generate_UIBox_ability_table({ ability = ability, config = { center = _c }, bypass_lock = true}, true)}
            specific_vars = ret[1]
            if ret[2] then desc_nodes[#desc_nodes+1] = ret[2] end
            main_end = ret[3]
        end'''
position = "at"
payload = ''''''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if _c.name == 'Stone Joker' or _c.name == 'Marble Joker' then info_queue[#info_queue+1] = G.P_CENTERS.m_stone'''
position = "before"
payload = '''if _c.mim_key then info_queue[#info_queue+1] = {type = 'descriptions', set = 'Joker', key = _c.mim_key, specific_vars = _c.plantain_info or {}}'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if _c.name == 'Stone Joker' or _c.name == 'Marble Joker' then info_queue[#info_queue+1] = G.P_CENTERS.m_stone'''
position = "at"
payload = '''elseif _c.name == 'Stone Joker' or _c.name == 'Marble Joker' then info_queue[#info_queue+1] = G.P_CENTERS.m_stone'''
match_indent = true

